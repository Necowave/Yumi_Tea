import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, PreCheckoutQueryHandler
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSE_LANGUAGE, MAIN_MENU, ORDER_CATEGORY, CHOOSE_FLAVOR, CHOOSE_TOPPINGS, CONFIRM_ORDER, ADD_LOCATION, PAYMENT, SETTINGS, CONTACT_INPUT = range(10)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('bubble_tea_bot.db') as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users 
                     (user_id INTEGER PRIMARY KEY, language TEXT, loyalty_drinks INTEGER DEFAULT 0)''')
        c.execute('''CREATE TABLE IF NOT EXISTS orders 
                     (order_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, 
                      category TEXT, flavor TEXT, toppings TEXT, status TEXT, stars_paid INTEGER, is_free BOOLEAN, 
                      latitude REAL, longitude REAL)''')
        conn.commit()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
RU = {
    'welcome': '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yumi Tea! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:',
    'main_menu': '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Yumi Tea. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
    'order': 'üõí –ó–∞–∫–∞–∑–∞—Ç—å',
    'view_menu': 'üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é',
    'loyalty': '‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
    'contact': 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏',
    'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'choose_category': '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–∞:',
    'choose_flavor': '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:',
    'choose_toppings': '–í—ã–±–µ—Ä–∏ —Ç–æ–ø–ø–∏–Ω–≥ (–æ–¥–∏–Ω):',
    'confirm_order': '–¢–≤–æ–π –∑–∞–∫–∞–∑: {order}. –¶–µ–Ω–∞: {price} Stars. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?',
    'add_location': '–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–æ–∑–∂–µ:',
    'payment': '–û–ø–ª–∞—Ç–∏ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram Stars: {price} Stars',
    'order_confirmed': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –≤ Yumi Tea! –¢–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}',
    'menu': '–ú–µ–Ω—é Yumi Tea:\n- ‚òï –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–æ–ª–æ—á–Ω—ã–π —á–∞–π: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –¢–∞—Ä–æ, –ú–∞—Ç—á–∞\n- üçπ –§—Ä—É–∫—Ç–æ–≤—ã–π —á–∞–π: –ú–∞–Ω–≥–æ, –ö–ª—É–±–Ω–∏–∫–∞, –ü–µ—Ä—Å–∏–∫\n- ü•§ –û—Å–æ–±—ã–π —á–∞–π: –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Å–∞—Ö–∞—Ä, –°—ã—Ä–Ω–∞—è –ø–µ–Ω–∫–∞\n–¢–æ–ø–ø–∏–Ω–≥–∏: üßã –ñ–µ–º—á—É–≥ —Ç–∞–ø–∏–æ–∫–∏, üçÆ –ñ–µ–ª–µ, üí• –õ–æ–ø–∞—é—â–∏–µ—Å—è –±–æ–±–∞\n–í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî 50 Stars (—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä)',
    'loyalty_status': '–¢—ã –∑–∞–∫–∞–∑–∞–ª {drinks} –Ω–∞–ø–∏—Ç–∫–æ–≤. {remaining} –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ!',
    'contact_prompt': '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º!',
    'send_location': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
    'location_later': '–ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ–∑–∂–µ!',
    'send_location_not_text': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.',
    'language_set': '–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}',
    'order_cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',
    'order_error': '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ',
    'order_not_found': '–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
    'db_error': '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    'free_drink_used': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –°—á—ë—Ç—á–∏–∫ –æ–±–Ω—É–ª—ë–Ω!',
    'message_sent': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
}

EN = {
    'welcome': 'Hello! Welcome to Yumi Tea! Choose your language:',
    'main_menu': 'Hi! I‚Äôm your assistant at Yumi Tea. What would you like to do?',
    'order': 'üõí Order',
    'view_menu': 'üìñ View Menu',
    'loyalty': '‚≠ê Loyalty Program',
    'contact': 'üìû Contact Us',
    'settings': '‚öôÔ∏è Settings',
    'choose_category': 'Choose a drink category:',
    'choose_flavor': 'Choose a flavor:',
    'choose_toppings': 'Choose one topping:',
    'confirm_order': 'Your order: {order}. Price: {price} Stars. Confirm?',
    'add_location': 'Send your location for delivery or choose later:',
    'payment': 'Pay for your order with Telegram Stars: {price} Stars',
    'order_confirmed': 'Thank you for your order at Yumi Tea! Your order number: #{order_id}',
    'menu': 'Yumi Tea Menu:\n- ‚òï Classic Milk Tea: Original, Taro, Matcha\n- üçπ Fruit Tea: Mango, Strawberry, Peach\n- ü•§ Special Tea: Brown Sugar, Cheese Foam\nToppings: üßã Tapioca Pearls, üçÆ Jelly, üí• Popping Boba\nAll drinks ‚Äî 50 Stars (medium size)',
    'loyalty_status': 'You‚Äôve ordered {drinks} drinks. {remaining} until a free one!',
    'contact_prompt': 'Write your question, and we‚Äôll reply!',
    'send_location': 'Please send your location.',
    'location_later': 'Don‚Äôt forget to add your location later!',
    'send_location_not_text': 'Please send your location, not text.',
    'language_set': 'Language set: {lang}',
    'order_cancelled': 'Order cancelled',
    'order_error': 'Error: incomplete order data',
    'order_not_found': 'Error: order not found',
    'db_error': 'Database error',
    'free_drink_used': 'Congratulations! Your free drink has been used. Counter reset!',
    'message_sent': 'Message sent!'
}

def get_text(user_id, key, **kwargs):
    user = get_user(user_id)
    lang = user[1] if user else 'en'
    text = RU.get(key, EN[key]) if lang == 'ru' else EN[key]
    return text.format(**kwargs)

def get_user(user_id):
    with sqlite3.connect('bubble_tea_bot.db') as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return c.fetchone()

def update_user(user_id, language=None, loyalty_drinks=None):
    with sqlite3.connect('bubble_tea_bot.db') as conn:
        c = conn.cursor()
        if language:
            c.execute('UPDATE users SET language = ? WHERE user_id = ?', (language, user_id))
        if loyalty_drinks is not None:
            c.execute('UPDATE users SET loyalty_drinks = ? WHERE user_id = ?', (loyalty_drinks, user_id))
        conn.commit()

def create_order(user_id, category, flavor, toppings):
    user = get_user(user_id)
    loyalty_drinks = user[2] if user else 0
    is_free = (loyalty_drinks % 10 == 9)
    stars_paid = 0 if is_free else 50
    with sqlite3.connect('bubble_tea_bot.db') as conn:
        c = conn.cursor()
        c.execute('''INSERT INTO orders (user_id, category, flavor, toppings, status, stars_paid, is_free)
                     VALUES (?, ?, ?, ?, 'pending_location', ?, ?)''',
                  (user_id, category, flavor, toppings, stars_paid, is_free))
        order_id = c.lastrowid
        conn.commit()
    return order_id, stars_paid

# –•–µ–ª–ø–µ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def add_back_button(keyboard, back_text="üîô –ù–∞–∑–∞–¥"):
    keyboard.append([InlineKeyboardButton(back_text, callback_data='back')])
    return keyboard

def get_main_menu_keyboard(lang):
    button_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if lang == 'ru' else "üè† Main Menu"
    keyboard = [[KeyboardButton(button_text)]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
async def back_to_main_menu(update: Update, context):
    query = update.callback_query
    await query.answer()
    print(f"Returning to MAIN_MENU for user {update.effective_user.id}")
    await show_main_menu(update, context)
    return MAIN_MENU

async def back_to_main_menu_text(update: Update, context):
    print(f"Back to main menu text triggered for user {update.effective_user.id}")
    await show_main_menu(update, context)
    return MAIN_MENU

async def settings(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Settings triggered for user {user_id}")
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='set_lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='set_lang_en')]
    ]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'welcome'), reply_markup=reply_markup)
    context.user_data['state'] = 'SETTINGS'
    return SETTINGS

async def set_language(update: Update, context):
    query = update.callback_query
    await query.answer()
    lang = query.data.split('_')[2]
    user_id = query.from_user.id
    update_user(user_id, language=lang)
    await query.edit_message_text(get_text(user_id, 'language_set', lang=lang))
    await show_main_menu(update, context)
    return MAIN_MENU

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context):
    user_id = update.effective_user.id
    if get_user(user_id):
        await show_main_menu(update, context)
        return MAIN_MENU
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(get_text(user_id, 'welcome'), reply_markup=reply_markup)
    context.user_data['state'] = 'CHOOSE_LANGUAGE'
    return CHOOSE_LANGUAGE

async def choose_language(update: Update, context):
    query = update.callback_query
    await query.answer()
    lang = query.data.split('_')[1]
    user_id = query.from_user.id
    if get_user(user_id):
        update_user(user_id, language=lang)
    else:
        with sqlite3.connect('bubble_tea_bot.db') as conn:
            c = conn.cursor()
            c.execute('INSERT INTO users (user_id, language) VALUES (?, ?)', (user_id, lang))
            conn.commit()
    await query.edit_message_text(get_text(user_id, 'language_set', lang=lang))
    await show_main_menu(update, context)
    return MAIN_MENU

async def show_main_menu(update: Update, context):
    user_id = update.effective_user.id
    print(f"Showing main menu for user {user_id}")
    text = get_text(user_id, 'main_menu')
    keyboard = [
        [InlineKeyboardButton(get_text(user_id, 'order'), callback_data='order')],
        [InlineKeyboardButton(get_text(user_id, 'view_menu'), callback_data='view_menu')],
        [InlineKeyboardButton(get_text(user_id, 'loyalty'), callback_data='loyalty')],
        [InlineKeyboardButton(get_text(user_id, 'contact'), callback_data='contact')],
        [InlineKeyboardButton(get_text(user_id, 'settings'), callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        await context.bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ" if get_user(user_id)[1] == 'ru' else "Choose an action",
            reply_markup=get_main_menu_keyboard(get_user(user_id)[1])
        )
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ" if get_user(user_id)[1] == 'ru' else "Choose an action",
            reply_markup=get_main_menu_keyboard(get_user(user_id)[1])
        )
    context.user_data['state'] = 'MAIN_MENU'
    return MAIN_MENU

async def start_order(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Start order triggered for user {user_id}")
    context.user_data['order'] = {}
    text = get_text(user_id, 'choose_category')
    keyboard = [
        [InlineKeyboardButton("‚òï Classic Milk Tea" if get_user(user_id)[1] == 'en' else "‚òï –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–æ–ª–æ—á–Ω—ã–π —á–∞–π", callback_data='cat_classic')],
        [InlineKeyboardButton("üçπ Fruit Tea" if get_user(user_id)[1] == 'en' else "üçπ –§—Ä—É–∫—Ç–æ–≤—ã–π —á–∞–π", callback_data='cat_fruit')],
        [InlineKeyboardButton("ü•§ Special Tea" if get_user(user_id)[1] == 'en' else "ü•§ –û—Å–æ–±—ã–π —á–∞–π", callback_data='cat_special')]
    ]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)
    context.user_data['state'] = 'ORDER_CATEGORY'
    return ORDER_CATEGORY

async def choose_category(update: Update, context):
    query = update.callback_query
    await query.answer()
    category = query.data.split('_')[1]
    context.user_data['order']['category'] = category
    user_id = query.from_user.id
    lang = get_user(user_id)[1]
    if category == 'classic':
        flavors = [
            InlineKeyboardButton("üçµ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π" if lang == 'ru' else "üçµ Original", callback_data='flav_original'),
            InlineKeyboardButton("ü•î –¢–∞—Ä–æ" if lang == 'ru' else "ü•î Taro", callback_data='flav_taro'),
            InlineKeyboardButton("üçµ –ú–∞—Ç—á–∞" if lang == 'ru' else "üçµ Matcha", callback_data='flav_matcha')
        ]
    elif category == 'fruit':
        flavors = [
            InlineKeyboardButton("ü•≠ –ú–∞–Ω–≥–æ" if lang == 'ru' else "ü•≠ Mango", callback_data='flav_mango'),
            InlineKeyboardButton("üçì –ö–ª—É–±–Ω–∏–∫–∞" if lang == 'ru' else "üçì Strawberry", callback_data='flav_strawberry'),
            InlineKeyboardButton("üçë –ü–µ—Ä—Å–∏–∫" if lang == 'ru' else "üçë Peach", callback_data='flav_peach')
        ]
    else:  # special
        flavors = [
            InlineKeyboardButton("üçØ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Å–∞—Ö–∞—Ä" if lang == 'ru' else "üçØ Brown Sugar", callback_data='flav_brown_sugar'),
            InlineKeyboardButton("üßÄ –°—ã—Ä–Ω–∞—è –ø–µ–Ω–∫–∞" if lang == 'ru' else "üßÄ Cheese Foam", callback_data='flav_cheese_foam')
        ]
    keyboard = [flavors[i:i+2] for i in range(0, len(flavors), 2)]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'choose_flavor'), reply_markup=reply_markup)
    context.user_data['state'] = 'CHOOSE_FLAVOR'
    return CHOOSE_FLAVOR

async def choose_flavor(update: Update, context):
    query = update.callback_query
    await query.answer()
    flavor = "_".join(query.data.split('_')[1:])
    context.user_data['order']['flavor'] = flavor
    user_id = query.from_user.id
    lang = get_user(user_id)[1]
    keyboard = [
        [InlineKeyboardButton("üßã –ñ–µ–º—á—É–≥ —Ç–∞–ø–∏–æ–∫–∏" if lang == 'ru' else "üßã Tapioca Pearls", callback_data='top_pearls'),
         InlineKeyboardButton("üçÆ –ñ–µ–ª–µ" if lang == 'ru' else "üçÆ Jelly", callback_data='top_jelly')],
        [InlineKeyboardButton("üí• –õ–æ–ø–∞—é—â–∏–µ—Å—è –±–æ–±–∞" if lang == 'ru' else "üí• Popping Boba", callback_data='top_boba')]
    ]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'choose_toppings'), reply_markup=reply_markup)
    context.user_data['state'] = 'CHOOSE_TOPPINGS'
    return CHOOSE_TOPPINGS

async def choose_toppings(update: Update, context):
    query = update.callback_query
    await query.answer()
    topping = query.data.split('_')[1]
    context.user_data['order']['toppings'] = topping
    user_id = query.from_user.id
    order_desc = f"{context.user_data['order']['category']} - {context.user_data['order']['flavor']} —Å {topping}"
    user = get_user(user_id)
    price = 0 if (user[2] % 10 == 9) else 50
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" if user[1] == 'ru' else "‚úÖ Confirm", callback_data='confirm'),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞" if user[1] == 'ru' else "‚ùå Cancel", callback_data='cancel')]
    ]
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'confirm_order', order=order_desc, price=price), reply_markup=reply_markup)
    context.user_data['state'] = 'CONFIRM_ORDER'
    return CONFIRM_ORDER

async def confirm_order(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'cancel':
        await query.edit_message_text(get_text(user_id, 'order_cancelled'))
        context.user_data.clear()
        return ConversationHandler.END

    order_data = context.user_data.get('order', {})
    missing_fields = [field for field in ['category', 'flavor', 'toppings'] if field not in order_data or not order_data[field]]
    
    if missing_fields:
        missing_text = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: " + ", ".join(missing_fields) if get_user(user_id)[1] == 'ru' else "Missing data: " + ", ".join(missing_fields)
        await query.edit_message_text(f"{get_text(user_id, 'order_error')}\n{missing_text}")
        if 'category' not in order_data or not order_data['category']:
            return await start_order(update, context)
        elif 'flavor' not in order_data or not order_data['flavor']:
            return await choose_category(update, context)
        elif 'toppings' not in order_data or not order_data['toppings']:
            return await choose_flavor(update, context)
    
    try:
        order_id, price = create_order(user_id,
                                       order_data['category'],
                                       order_data['flavor'],
                                       order_data['toppings'])
        context.user_data['order_id'] = order_id
        context.user_data['price'] = price
        
        keyboard = [
            [InlineKeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å" if get_user(user_id)[1] == 'ru' else "üìç Send Now", callback_data='loc_now'),
             InlineKeyboardButton("‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ" if get_user(user_id)[1] == 'ru' else "‚è≥ Add Later", callback_data='loc_later')]
        ]
        add_back_button(keyboard)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(get_text(user_id, 'add_location'), reply_markup=reply_markup)
        context.user_data['state'] = 'ADD_LOCATION'
        return ADD_LOCATION
    
    except Exception as e:
        await query.edit_message_text(f"{get_text(user_id, 'order_error')}: {str(e)}")
        return await start_order(update, context)

async def add_location(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if 'order_id' not in context.user_data:
        await query.edit_message_text(get_text(user_id, 'order_not_found'))
        return ConversationHandler.END
    order_id = context.user_data['order_id']
    price = context.user_data['price']
    if query.data == 'loc_now':
        location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é" if get_user(user_id)[1] == 'ru' else "üìç Send Location", request_location=True)
        keyboard = [[location_button]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await query.message.reply_text(get_text(user_id, 'send_location'), reply_markup=reply_markup)
        return ADD_LOCATION
    await query.edit_message_text(get_text(user_id, 'location_later'))
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Stars" if get_user(user_id)[1] == 'ru' else "üí≥ Pay with Stars", callback_data='pay_real')],
        [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞" if get_user(user_id)[1] == 'ru' else "üß™ Test Payment", callback_data='pay_test')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        get_text(user_id, 'payment', price=price),
        reply_markup=reply_markup
    )
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ" if get_user(user_id)[1] == 'ru' else "Choose an action",
        reply_markup=get_main_menu_keyboard(get_user(user_id)[1])
    )
    context.user_data['state'] = 'PAYMENT'
    return PAYMENT

async def handle_location(update: Update, context):
    user_id = update.effective_user.id
    location = update.message.location
    if 'order_id' not in context.user_data:
        await update.message.reply_text(get_text(user_id, 'order_not_found'))
        return ConversationHandler.END
    order_id = context.user_data['order_id']
    price = context.user_data['price']
    try:
        with sqlite3.connect('bubble_tea_bot.db') as conn:
            c = conn.cursor()
            c.execute('UPDATE orders SET latitude = ?, longitude = ?, status = ? WHERE order_id = ?',
                      (location.latitude, location.longitude, 'pending_payment', order_id))
            conn.commit()
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Stars" if get_user(user_id)[1] == 'ru' else "üí≥ Pay with Stars", callback_data='pay_real')],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞" if get_user(user_id)[1] == 'ru' else "üß™ Test Payment", callback_data='pay_test')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            get_text(user_id, 'payment', price=price),
            reply_markup=reply_markup
        )
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ" if get_user(user_id)[1] == 'ru' else "Choose an action",
            reply_markup=get_main_menu_keyboard(get_user(user_id)[1])
        )
        context.user_data['state'] = 'PAYMENT'
        return PAYMENT
    except sqlite3.Error:
        await update.message.reply_text(get_text(user_id, 'db_error'))
        return ConversationHandler.END

async def handle_text_in_add_location(update: Update, context):
    user_id = update.effective_user.id
    await update.message.reply_text(get_text(user_id, 'send_location_not_text'))
    return ADD_LOCATION

async def pre_checkout(update: Update, context):
    await context.bot.answer_pre_checkout_query(update.pre_checkout_query.id, ok=True)
    return PAYMENT

async def test_payment(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Test payment triggered for user {user_id}")
    if 'order_id' not in context.user_data:
        await query.edit_message_text(get_text(user_id, 'order_not_found'))
        return ConversationHandler.END
    await query.edit_message_text(
        "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!" if get_user(user_id)[1] == 'ru' else "Test payment completed successfully!"
    )
    # –í—ã–∑—ã–≤–∞–µ–º successful_payment –Ω–∞–ø—Ä—è–º—É—é
    await successful_payment(update, context)
    context.user_data['state'] = 'MAIN_MENU'
    return MAIN_MENU

async def real_payment(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Real payment triggered for user {user_id}")
    if 'order_id' not in context.user_data:
        await query.edit_message_text(get_text(user_id, 'order_not_found'))
        return ConversationHandler.END
    order_id = context.user_data['order_id']
    price = context.user_data['price']
    await query.edit_message_text(get_text(user_id, 'payment', price=price))
    await context.bot.send_invoice(
        chat_id=user_id,
        title="Yumi Tea Order",
        description="Your bubble tea order",
        payload=f"order_{order_id}",
        provider_token="",
        currency="XTR",
        prices=[{"label": "Drink", "amount": price}]
    )
    context.user_data['state'] = 'PAYMENT'
    return PAYMENT

async def successful_payment(update: Update, context):
    user_id = update.effective_user.id
    print(f"Successful payment triggered for user {user_id}")
    if 'order_id' not in context.user_data:
        await update.effective_message.reply_text(get_text(user_id, 'order_not_found'))
        return ConversationHandler.END
    order_id = context.user_data['order_id']
    try:
        with sqlite3.connect('bubble_tea_bot.db') as conn:
            c = conn.cursor()
            c.execute('UPDATE orders SET status = ? WHERE order_id = ?', ('completed', order_id))
            user = get_user(user_id)
            if user[2] % 10 != 9:
                new_loyalty = user[2] + 1
                if new_loyalty % 10 == 9:
                    remaining = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!" if user[1] == 'ru' else "Free drink!"
                else:
                    remaining = f"–û—Å—Ç–∞–ª–æ—Å—å {10 - (new_loyalty % 10)}" if user[1] == 'ru' else f"{10 - (new_loyalty % 10)} left"
                c.execute('UPDATE users SET loyalty_drinks = ? WHERE user_id = ?', (new_loyalty, user_id))
                await update.effective_message.reply_text(get_text(user_id, 'loyalty_status', drinks=new_loyalty, remaining=remaining))
            else:
                c.execute('UPDATE users SET loyalty_drinks = ? WHERE user_id = ?', (0, user_id))
                await update.effective_message.reply_text(get_text(user_id, 'free_drink_used'))
            order = c.execute('SELECT latitude, longitude FROM orders WHERE order_id = ?', (order_id,)).fetchone()
            conn.commit()
        await update.effective_message.reply_text(get_text(user_id, 'order_confirmed', order_id=order_id))
        if order is None or order[0] is None or order[1] is None:
            await update.effective_message.reply_text(get_text(user_id, 'location_later'))
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        context.user_data.clear()
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        print(f"Returning to MAIN_MENU after successful payment for user {user_id}")
        context.user_data['state'] = 'MAIN_MENU'
        return MAIN_MENU
    except sqlite3.Error:
        await update.effective_message.reply_text(get_text(user_id, 'db_error'))
        return ConversationHandler.END

async def view_menu(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"View menu triggered for user {user_id}")
    keyboard = []
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'menu'), reply_markup=reply_markup)
    context.user_data['state'] = 'MAIN_MENU'
    return MAIN_MENU

async def loyalty(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Loyalty triggered for user {user_id}")
    user = get_user(user_id)
    drinks = user[2]
    if drinks % 10 == 9:
        remaining = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫!" if user[1] == 'ru' else "Free drink!"
    else:
        remaining = f"–û—Å—Ç–∞–ª–æ—Å—å {10 - (drinks % 10)}" if user[1] == 'ru' else f"{10 - (drinks % 10)} left"
    keyboard = []
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'loyalty_status', drinks=drinks, remaining=remaining), reply_markup=reply_markup)
    context.user_data['state'] = 'MAIN_MENU'
    return MAIN_MENU

async def contact(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    print(f"Contact triggered for user {user_id}")
    keyboard = []
    add_back_button(keyboard)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(get_text(user_id, 'contact_prompt'), reply_markup=reply_markup)
    context.user_data['state'] = 'CONTACT_INPUT'
    return CONTACT_INPUT

async def forward_contact(update: Update, context):
    user_id = update.effective_user.id
    message = update.message.text
    await context.bot.send_message(chat_id='627749619', text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message}")
    await update.message.reply_text(get_text(user_id, 'message_sent'))
    await show_main_menu(update, context)
    return MAIN_MENU

def main():
    init_db()
    application = Application.builder().token('7437991442:AAF104FtAQuMDoM28KnlKRE68X7eqKeNwX4').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSE_LANGUAGE: [
                CallbackQueryHandler(choose_language, pattern='lang_'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            MAIN_MENU: [
                CallbackQueryHandler(start_order, pattern='order'),
                CallbackQueryHandler(view_menu, pattern='view_menu'),
                CallbackQueryHandler(loyalty, pattern='loyalty'),
                CallbackQueryHandler(contact, pattern='contact'),
                CallbackQueryHandler(settings, pattern='settings'),
                MessageHandler(filters.Regex(r'^(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üè† Main Menu)$'), back_to_main_menu_text)
            ],
            ORDER_CATEGORY: [
                CallbackQueryHandler(choose_category, pattern='cat_'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            CHOOSE_FLAVOR: [
                CallbackQueryHandler(choose_flavor, pattern='flav_'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            CHOOSE_TOPPINGS: [
                CallbackQueryHandler(choose_toppings, pattern='top_'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            CONFIRM_ORDER: [
                CallbackQueryHandler(confirm_order, pattern='confirm|cancel'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            ADD_LOCATION: [
                CallbackQueryHandler(add_location, pattern='loc_'),
                MessageHandler(filters.LOCATION, handle_location),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_in_add_location),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            PAYMENT: [
                CallbackQueryHandler(real_payment, pattern='pay_real'),
                CallbackQueryHandler(test_payment, pattern='pay_test'),
                MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            SETTINGS: [
                CallbackQueryHandler(set_language, pattern='set_lang_'),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ],
            CONTACT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, forward_contact),
                CallbackQueryHandler(back_to_main_menu, pattern='back')
            ]
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, forward_contact)]
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex(r'^(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üè† Main Menu)$'), back_to_main_menu_text))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    application.run_polling()

if __name__ == '__main__':
    main()